const chai = require('chai')

const baseUrl = 'http://localhost:5000'
const url = '/api/statistics'
const jogLogUrl = '/api/joglog'

describe(url, () => {

  before(async() => {
    await chai.login(baseUrl, 'user')
    await chai.delete(baseUrl, `${jogLogUrl}/?user=user`)

    // make sure other users records don't affect calculation
    await chai.login(baseUrl, 'admin')
    await chai.put(baseUrl, jogLogUrl).send([{
      date: '2016-12-16 00:00:00',
      distance: 1.48,
      time: [1, 51]
    }, {
      date: '2016-12-30 00:00:00',
      distance: 2.5,
      time: [0, 45]
    }])

    await chai.login(baseUrl, 'user')
    await chai.put(baseUrl, jogLogUrl).send([{
      date: '2016-12-16 00:00:00',
      distance: 1.48,
      time: [1, 51]
    }, {
      date: '2016-12-30 00:00:00',
      distance: 2.5,
      time: [0, 45]
    }, {
      date: '2017-01-01 00:00:00',
      distance: 1.42,
      time: [2, 32]
    }, {
      date: '2017-01-08 00:00:00',
      distance: 3.17,
      time: [0, 52]
    }, {
      date: '2017-01-018 00:00:00',
      distance: 2.37,
      time: [1, 30]
    }, {
      date: '2017-02-08 00:00:00',
      distance: 0.47,
      time: [2, 22]
    }])
  })

  it('should be accessible', async() => {
    const res = await chai.options(baseUrl, url)
    res.should.have.status(200)
    res.text.should.equal('GET,HEAD')
  })

  it('should return overall statistics of the user', async() => {
    const res = await chai.get(baseUrl, url)
    res.should.have.status(200)
    res.body.should.be.an('object')
    const result = res.body.overall
    result.should.be.a('array')
    result.should.be.length(1)
    result[0].should.be.a('object')
    result[0].type.should.be.equal('overall')
    result[0].slowestSpeed.should.be.equal(0.2)
    result[0].should.have.property('fastestSpeed')
    result[0].fastestSpeed.should.be.equal(3.66)
    result[0].should.have.property('shortestDistance')
    result[0].shortestDistance.should.be.equal(0.47)
    result[0].should.have.property('longestDistance')
    result[0].longestDistance.should.be.equal(3.17)
    result[0].should.have.property('longestDistDate')
    result[0].longestDistDate.should.be.equal('2017-01-07T18:30:00.000Z')
    result[0].should.have.property('distance')
    result[0].distance.should.be.equal(11.410000000000002)
    result[0].should.have.property('time')
    result[0].time.should.be.a('array')
    result[0].time.should.be.length(2)
    result[0].time[0].should.be.equal(9)
    result[0].time[1].should.be.equal(52)
    result[0].should.have.property('entries')
    result[0].entries.should.be.equal(6)
    result[0].should.have.property('averageDistance')
    result[0].averageDistance.should.be.equal(1.901666666666667)
    result[0].should.have.property('averageTime')
    result[0].averageTime.should.be.a('array')
    result[0].averageTime.should.be.length(2)
    result[0].averageTime[0].should.be.equal(1)
    result[0].averageTime[1].should.be.equal(39)
    result[0].should.have.property('averageSpeed')
    result[0].averageSpeed.should.be.equal(1.6883333333333332)
  })

  it('should return yearly statistics of the user', async() => {
    const res = await chai.get(baseUrl, url)
    res.should.have.status(200)
    res.body.should.be.an('object')
    const result = res.body.yearly
    result.should.be.a('array')
    result.should.be.length(2)
    result[0].should.be.a('object')
    result[0].year.should.be.equal(2016)
    result[0].type.should.be.equal('year')
    result[0].slowestSpeed.should.be.equal(0.8)
    result[0].fastestSpeed.should.be.equal(3.33)
    result[0].shortestDistance.should.be.equal(1.48)
    result[0].longestDistance.should.be.equal(2.5)
    result[0].longestDistDate.should.be.equal('2016-12-29T18:30:00.000Z')
    result[0].distance.should.be.equal(3.98)
    result[0].speed.should.be.equal(4.13)
    result[0].time.should.be.a('array')
    result[0].time.should.be.length(2)
    result[0].time[0].should.be.equal(2)
    result[0].time[1].should.be.equal(36)
    result[0].entries.should.be.equal(2)
    result[0].averageDistance.should.be.equal(1.99)
    result[0].averageTime.should.be.a('array')
    result[0].averageTime.should.be.length(2)
    result[0].averageTime[0].should.be.equal(1)
    result[0].averageTime[1].should.be.equal(18)
    result[0].averageSpeed.should.be.equal(2.065)
    result[1].should.be.a('object')
    result[1].year.should.be.equal(2017)
    result[1].type.should.be.equal('year')
    result[1].slowestSpeed.should.be.equal(0.2)
    result[1].fastestSpeed.should.be.equal(3.66)
    result[1].shortestDistance.should.be.equal(0.47)
    result[1].longestDistance.should.be.equal(3.17)
    result[1].longestDistDate.should.be.equal('2017-01-07T18:30:00.000Z')
    result[1].distance.should.be.equal(7.43)
    result[1].speed.should.be.equal(6.000000000000001)
    result[1].time.should.be.a('array')
    result[1].time.should.be.length(2)
    result[1].time[0].should.be.equal(7)
    result[1].time[1].should.be.equal(16)
    result[1].entries.should.be.equal(4)
    result[1].averageDistance.should.be.equal(1.8575)
    result[1].averageTime.should.be.a('array')
    result[1].averageTime.should.be.length(2)
    result[1].averageTime[0].should.be.equal(1)
    result[1].averageTime[1].should.be.equal(49)
    result[1].averageSpeed.should.be.equal(1.5000000000000002)
  })

  it('should return monthly statistics of the user', async() => {
    const res = await chai.get(baseUrl, url)
    res.should.have.status(200)
    res.body.should.be.an('object')
    const result = res.body.monthly
    result.should.be.a('array')
    result.should.be.length(3)
    result[0].should.be.a('object')
    result[0].year.should.be.equal(2016)
    result[0].month.should.be.equal(11)
    result[0].type.should.be.equal('month')
    result[0].slowestSpeed.should.be.equal(0.8)
    result[0].fastestSpeed.should.be.equal(3.33)
    result[0].shortestDistance.should.be.equal(1.48)
    result[0].longestDistance.should.be.equal(2.5)
    result[0].longestDistDate.should.be.equal('2016-12-29T18:30:00.000Z')
    result[0].date.should.be.equal('2016-12-29T18:30:00.000Z')
    result[0].distance.should.be.equal(3.98)
    result[0].speed.should.be.equal(4.13)
    result[0].time.should.be.a('array')
    result[0].time.should.be.length(2)
    result[0].time[0].should.be.equal(2)
    result[0].time[1].should.be.equal(36)
    result[0].entries.should.be.equal(2)
    result[0].averageDistance.should.be.equal(1.99)
    result[0].averageTime.should.be.a('array')
    result[0].averageTime.should.be.length(2)
    result[0].averageTime[0].should.be.equal(1)
    result[0].averageTime[1].should.be.equal(18)
    result[0].averageSpeed.should.be.equal(2.065)
    result[1].should.be.a('object')
    result[1].year.should.be.equal(2017)
    result[1].month.should.be.equal(0)
    result[1].type.should.be.equal('month')
    result[1].slowestSpeed.should.be.equal(0.56)
    result[1].fastestSpeed.should.be.equal(3.66)
    result[1].shortestDistance.should.be.equal(1.42)
    result[1].longestDistance.should.be.equal(3.17)
    result[1].longestDistDate.should.be.equal('2017-01-07T18:30:00.000Z')
    result[1].date.should.be.equal('2017-01-17T18:30:00.000Z')
    result[1].distance.should.be.equal(6.96)
    result[1].speed.should.be.equal(5.800000000000001)
    result[1].time.should.be.a('array')
    result[1].time.should.be.length(2)
    result[1].time[0].should.be.equal(4)
    result[1].time[1].should.be.equal(54)
    result[1].entries.should.be.equal(3)
    result[1].averageDistance.should.be.equal(2.32)
    result[1].averageTime.should.be.a('array')
    result[1].averageTime.should.be.length(2)
    result[1].averageTime[0].should.be.equal(1)
    result[1].averageTime[1].should.be.equal(38)
    result[1].averageSpeed.should.be.equal(1.9333333333333336)
    result[2].should.be.a('object')
    result[2].year.should.be.equal(2017)
    result[2].month.should.be.equal(1)
    result[2].type.should.be.equal('month')
    result[2].slowestSpeed.should.be.equal(0.2)
    result[2].fastestSpeed.should.be.equal(0.2)
    result[2].shortestDistance.should.be.equal(0.47)
    result[2].longestDistance.should.be.equal(0.47)
    result[2].longestDistDate.should.be.equal('2017-02-07T18:30:00.000Z')
    result[2].date.should.be.equal('2017-02-07T18:30:00.000Z')
    result[2].distance.should.be.equal(0.47)
    result[2].speed.should.be.equal(0.2)
    result[2].time.should.be.a('array')
    result[2].time.should.be.length(2)
    result[2].time[0].should.be.equal(2)
    result[2].time[1].should.be.equal(22)
    result[2].entries.should.be.equal(1)
    result[2].averageDistance.should.be.equal(0.47)
    result[2].averageTime.should.be.a('array')
    result[2].averageTime.should.be.length(2)
    result[2].averageTime[0].should.be.equal(2)
    result[2].averageTime[1].should.be.equal(22)
    result[2].averageSpeed.should.be.equal(0.2)
  })

  it('should return weekly statistics of the user', async() => {
    const res = await chai.get(baseUrl, url)
    res.should.have.status(200)
    res.body.should.be.an('object')
    const result = res.body.weekly
    result.should.be.a('array')
    result.should.be.length(6)
    result[0].should.be.a('object')
    result[0].year.should.be.equal(2016)
    result[0].month.should.be.equal(11)
    result[0].week.should.be.equal(51)
    result[0].type.should.be.equal('week')
    result[0].slowestSpeed.should.be.equal(0.8)
    result[0].fastestSpeed.should.be.equal(0.8)
    result[0].shortestDistance.should.be.equal(1.48)
    result[0].longestDistance.should.be.equal(1.48)
    result[0].longestDistDate.should.be.equal('2016-12-15T18:30:00.000Z')
    result[0].startOfWeek.should.be.equal('2016-12-10T18:30:00.000Z')
    result[0].endOfWeek.should.be.equal('2016-12-17T18:29:59.999Z')
    result[0].date.should.be.equal('2016-12-15T18:30:00.000Z')
    result[0].distance.should.be.equal(1.48)
    result[0].speed.should.be.equal(0.8)
    result[0].time.should.be.a('array')
    result[0].time.should.be.length(2)
    result[0].time[0].should.be.equal(1)
    result[0].time[1].should.be.equal(51)
    result[0].entries.should.be.equal(1)
    result[0].averageDistance.should.be.equal(1.48)
    result[0].averageTime.should.be.a('array')
    result[0].averageTime.should.be.length(2)
    result[0].averageTime[0].should.be.equal(1)
    result[0].averageTime[1].should.be.equal(51)
    result[0].averageSpeed.should.be.equal(0.8)
    result[1].should.be.a('object')
    result[1].year.should.be.equal(2016)
    result[1].month.should.be.equal(11)
    result[1].week.should.be.equal(53)
    result[1].slowestSpeed.should.be.equal(3.33)
    result[1].fastestSpeed.should.be.equal(3.33)
    result[1].shortestDistance.should.be.equal(2.5)
    result[1].longestDistance.should.be.equal(2.5)
    result[1].longestDistDate.should.be.equal('2016-12-29T18:30:00.000Z')
    result[1].startOfWeek.should.be.equal('2016-12-24T18:30:00.000Z')
    result[1].endOfWeek.should.be.equal('2016-12-31T18:29:59.999Z')
    result[1].date.should.be.equal('2016-12-29T18:30:00.000Z')
    result[1].distance.should.be.equal(2.5)
    result[1].speed.should.be.equal(3.33)
    result[1].time.should.be.a('array')
    result[1].time.should.be.length(2)
    result[1].time[0].should.be.equal(0)
    result[1].time[1].should.be.equal(45)
    result[1].entries.should.be.equal(1)
    result[1].averageDistance.should.be.equal(2.5)
    result[1].averageTime.should.be.a('array')
    result[1].averageTime.should.be.length(2)
    result[1].averageTime[0].should.be.equal(0)
    result[1].averageTime[1].should.be.equal(45)
    result[1].averageSpeed.should.be.equal(3.33)
    result[2].should.be.a('object')
    result[2].year.should.be.equal(2017)
    result[2].month.should.be.equal(0)
    result[2].week.should.be.equal(1)
    result[2].type.should.be.equal('week')
    result[2].slowestSpeed.should.be.equal(0.56)
    result[2].fastestSpeed.should.be.equal(0.56)
    result[2].shortestDistance.should.be.equal(1.42)
    result[2].longestDistance.should.be.equal(1.42)
    result[2].longestDistDate.should.be.equal('2016-12-31T18:30:00.000Z')
    result[2].startOfWeek.should.be.equal('2016-12-31T18:30:00.000Z')
    result[2].endOfWeek.should.be.equal('2017-01-07T18:29:59.999Z')
    result[2].date.should.be.equal('2016-12-31T18:30:00.000Z')
    result[2].distance.should.be.equal(1.42)
    result[2].speed.should.be.equal(0.56)
    result[2].time.should.be.a('array')
    result[2].time.should.be.length(2)
    result[2].time[0].should.be.equal(2)
    result[2].time[1].should.be.equal(32)
    result[2].entries.should.be.equal(1)
    result[2].averageDistance.should.be.equal(1.42)
    result[2].averageTime.should.be.a('array')
    result[2].averageTime.should.be.length(2)
    result[2].averageTime[0].should.be.equal(2)
    result[2].averageTime[1].should.be.equal(32)
    result[2].averageSpeed.should.be.equal(0.56)
    result[3].should.be.a('object')
    result[3].year.should.be.equal(2017)
    result[3].month.should.be.equal(0)
    result[3].week.should.be.equal(2)
    result[3].type.should.be.equal('week')
    result[3].slowestSpeed.should.be.equal(3.66)
    result[3].fastestSpeed.should.be.equal(3.66)
    result[3].shortestDistance.should.be.equal(3.17)
    result[3].longestDistance.should.be.equal(3.17)
    result[3].longestDistDate.should.be.equal('2017-01-07T18:30:00.000Z')
    result[3].startOfWeek.should.be.equal('2017-01-07T18:30:00.000Z')
    result[3].endOfWeek.should.be.equal('2017-01-14T18:29:59.999Z')
    result[3].date.should.be.equal('2017-01-07T18:30:00.000Z')
    result[3].distance.should.be.equal(3.17)
    result[3].speed.should.be.equal(3.66)
    result[3].time.should.be.a('array')
    result[3].time.should.be.length(2)
    result[3].time[0].should.be.equal(0)
    result[3].time[1].should.be.equal(52)
    result[3].entries.should.be.equal(1)
    result[3].averageDistance.should.be.equal(3.17)
    result[3].averageTime.should.be.a('array')
    result[3].averageTime.should.be.length(2)
    result[3].averageTime[0].should.be.equal(0)
    result[3].averageTime[1].should.be.equal(52)
    result[3].averageSpeed.should.be.equal(3.66)
    result[4].should.be.a('object')
    result[4].year.should.be.equal(2017)
    result[4].month.should.be.equal(0)
    result[4].week.should.be.equal(3)
    result[4].type.should.be.equal('week')
    result[4].slowestSpeed.should.be.equal(1.58)
    result[4].fastestSpeed.should.be.equal(1.58)
    result[4].shortestDistance.should.be.equal(2.37)
    result[4].longestDistance.should.be.equal(2.37)
    result[4].longestDistDate.should.be.equal('2017-01-17T18:30:00.000Z')
    result[4].startOfWeek.should.be.equal('2017-01-14T18:30:00.000Z')
    result[4].endOfWeek.should.be.equal('2017-01-21T18:29:59.999Z')
    result[4].date.should.be.equal('2017-01-17T18:30:00.000Z')
    result[4].distance.should.be.equal(2.37)
    result[4].speed.should.be.equal(1.58)
    result[4].time.should.be.a('array')
    result[4].time.should.be.length(2)
    result[4].time[0].should.be.equal(1)
    result[4].time[1].should.be.equal(30)
    result[4].entries.should.be.equal(1)
    result[4].averageDistance.should.be.equal(2.37)
    result[4].averageTime.should.be.a('array')
    result[4].averageTime.should.be.length(2)
    result[4].averageTime[0].should.be.equal(1)
    result[4].averageTime[1].should.be.equal(30)
    result[4].averageSpeed.should.be.equal(1.58)
    result[5].should.be.a('object')
    result[5].year.should.be.equal(2017)
    result[5].month.should.be.equal(1)
    result[5].week.should.be.equal(6)
    result[5].type.should.be.equal('week')
    result[5].slowestSpeed.should.be.equal(0.2)
    result[5].fastestSpeed.should.be.equal(0.2)
    result[5].shortestDistance.should.be.equal(0.47)
    result[5].longestDistance.should.be.equal(0.47)
    result[5].longestDistDate.should.be.equal('2017-02-07T18:30:00.000Z')
    result[5].startOfWeek.should.be.equal('2017-02-04T18:30:00.000Z')
    result[5].endOfWeek.should.be.equal('2017-02-11T18:29:59.999Z')
    result[5].date.should.be.equal('2017-02-07T18:30:00.000Z')
    result[5].distance.should.be.equal(0.47)
    result[5].speed.should.be.equal(0.2)
    result[5].time.should.be.a('array')
    result[5].time.should.be.length(2)
    result[5].time[0].should.be.equal(2)
    result[5].time[1].should.be.equal(22)
    result[5].entries.should.be.equal(1)
    result[5].averageDistance.should.be.equal(0.47)
    result[5].averageTime.should.be.a('array')
    result[5].averageTime.should.be.length(2)
    result[5].averageTime[0].should.be.equal(2)
    result[5].averageTime[1].should.be.equal(22)
    result[5].averageSpeed.should.be.equal(0.2)
  })

  it('should NOT return other user\'s statistics if accessed as user', async() => {
    chai.get(baseUrl, `${url}?user=admin`)
      .end((err, res) => res.should.have.status(401))
  })

  it('should NOT return other user\'s statistics if accessed as manager', async() => {
    await chai.login(baseUrl, 'manager')
    chai.get(baseUrl, `${url}?user=admin`)
      .end((err, res) => res.should.have.status(401))
  })

  it('should return other user\'s statistics if accessed as admin', async() => {
    await chai.login(baseUrl, 'admin')
    const res = await chai.get(baseUrl, `${url}?user=user`)
    res.should.have.status(200)
    const result = res.body.overall
    result.should.be.a('array')
    result.should.be.length(1)
    result[0].should.be.a('object')
    result[0].type.should.be.equal('overall')
    result[0].slowestSpeed.should.be.equal(0.2)
    result[0].should.have.property('fastestSpeed')
    result[0].fastestSpeed.should.be.equal(3.66)
    result[0].should.have.property('shortestDistance')
    result[0].shortestDistance.should.be.equal(0.47)
    result[0].should.have.property('longestDistance')
    result[0].longestDistance.should.be.equal(3.17)
  })

})